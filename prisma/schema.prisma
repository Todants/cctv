//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String     @id() @default(uuid())
  name            String?
  email           String?    @unique()
  pictureUrl      String?    @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  status          UserStatus @default(VERIFIED)
  globalRole      String     @default("USER")
  /// @password
  /// @omit
  password        String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt()
  userRoles       UserRole[] @relation("user")
  incidents       Incident[] @relation("user")
}

/// @@allow('all', true)
model Department {
  id        String     @id() @default(uuid())
  name      String?
  incidents Incident[] @relation("department")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RoleData {
  id        String     @id() @default(uuid())
  name      String?
  userRoles UserRole[] @relation("role")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Permission {
  id        String   @id() @default(uuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model IncidentType {
  id        String     @id() @default(uuid())
  name      String?
  incidents Incident[] @relation("incidentType")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model IncidentGroup {
  id        String     @id() @default(uuid())
  name      String?
  incidents Incident[] @relation("incidentGroup")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Camera {
  id        String     @id() @default(uuid())
  name      String?
  location  String?
  status    String?
  incidents Incident[] @relation("camera")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SurveillanceObject {
  id          String     @id() @default(uuid())
  name        String?
  description String?
  incidents   Incident[] @relation("surveillanceObject")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserRole {
  id        String    @id() @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], name: "user")
  roleId    String?
  role      RoleData? @relation(fields: [roleId], references: [id], name: "role")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Incident {
  id                   String              @id() @default(uuid())
  title                String?
  description          String?
  timestamp            String?
  status               String?
  userId               String?
  user                 User?               @relation(fields: [userId], references: [id], name: "user")
  incidentTypeId       String?
  incidentType         IncidentType?       @relation(fields: [incidentTypeId], references: [id], name: "incidentType")
  incidentGroupId      String?
  incidentGroup        IncidentGroup?      @relation(fields: [incidentGroupId], references: [id], name: "incidentGroup")
  cameraId             String?
  camera               Camera?             @relation(fields: [cameraId], references: [id], name: "camera")
  surveillanceObjectId String?
  surveillanceObject   SurveillanceObject? @relation(fields: [surveillanceObjectId], references: [id], name: "surveillanceObject")
  departmentId         String?
  department           Department?         @relation(fields: [departmentId], references: [id], name: "department")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt()
}
